rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ========= Helpers ========= */
    function signedIn() { return request.auth != null; }
    function isSelf(uid) { return signedIn() && request.auth.uid == uid; }

    // Admin if claim 'admin' is true OR roles array contains admin/superadmin
    function isAdmin() {
      return signedIn() && (
        request.auth.token.admin == true ||
        (request.auth.token.roles != null &&
         request.auth.token.roles.hasAny(['admin','superadmin']))
      );
    }

    // Fields employees may edit on their own profile
    function selfAllowedKeys() {
      return [
        'firstName','lastName','nickname','dob',
        'phone','emergencyPhone','emergencyName','photoURL',
        'setupCompleted','updatedAt'
      ];
    }

    /* ========= Employees ========= */
    match /employees/{uid} {
      // Employee can read self; admin can read all
      allow read: if isSelf(uid) || isAdmin();

      // Create by admin only
      allow create: if isAdmin();

      // Update: admin any; employee only allow-listed keys on self
      allow update: if isAdmin()
                 || (isSelf(uid) &&
                     request.resource.data.diff(resource.data)
                       .changedKeys().hasOnly(selfAllowedKeys()));

      // Delete by admin only
      allow delete: if isAdmin();
    }

    /* ========= Playlists =========
       Hosts/Admins can read all; any signed-in user can read if published==true;
       Writes are admin/superadmin only (supports multiple claims shapes + profile fallback).
    */
    match /playlists/{playlistId} {
      allow read: if
        signedIn() && (
          // Claims path
          request.auth.token.admin == true ||
          (request.auth.token.roles != null && (
            'host' in request.auth.token.roles ||
            'admin' in request.auth.token.roles ||
            'superadmin' in request.auth.token.roles
          )) ||
          (request.auth.token.role != null && (
            request.auth.token.role == 'host' ||
            request.auth.token.role == 'admin' ||
            request.auth.token.role == 'superadmin'
          )) ||
          // Profile fallback path
          (
            exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
            get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles != null &&
            (
              'host' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
              'admin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
              'superadmin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles
            )
          )
        )
        || (signedIn() && resource.data.published == true);

      allow create, update, delete: if signedIn() && (
        request.auth.token.admin == true ||
        (request.auth.token.roles != null && ('admin' in request.auth.token.roles || 'superadmin' in request.auth.token.roles)) ||
        (request.auth.token.role  != null && (request.auth.token.role == 'admin' || request.auth.token.role == 'superadmin'))
      );
    }

    /* ========= Legacy music_bingo =========
       Same as playlists
    */
    match /music_bingo/{playlistId} {
      allow read: if
        signedIn() && (
          // Claims path
          request.auth.token.admin == true ||
          (request.auth.token.roles != null && (
            'host' in request.auth.token.roles ||
            'admin' in request.auth.token.roles ||
            'superadmin' in request.auth.token.roles
          )) ||
          (request.auth.token.role != null && (
            request.auth.token.role == 'host' ||
            request.auth.token.role == 'admin' ||
            request.auth.token.role == 'superadmin'
          )) ||
          // Profile fallback path
          (
            exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
            get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles != null &&
            (
              'host' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
              'admin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
              'superadmin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles
            )
          )
        )
        || (signedIn() && resource.data.published == true);

      allow create, update, delete: if signedIn() && (
        request.auth.token.admin == true ||
        (request.auth.token.roles != null && ('admin' in request.auth.token.roles || 'superadmin' in request.auth.token.roles)) ||
        (request.auth.token.role  != null && (request.auth.token.role == 'admin' || request.auth.token.role == 'superadmin'))
      );
    }

    /* ========= Scores (Scoresheet submissions) =========
       Allow any signed-in user (incl. anonymous) to create a score document and read signed-in.
       No updates/deletes to keep data immutable.
    */
    match /scores/{scoreId} {
      allow create: if signedIn()
        && request.resource.data.keys().hasAll(["timestamp","eventName","teamCount","teams"])
        && request.resource.data.teamCount is int
        && request.resource.data.teamCount >= 0
        && request.resource.data.teams is list
        && request.resource.data.teams.size() <= 200;
      allow read: if signedIn();
      allow update, delete: if false;
    }

    /* ========= Games =========
       Players (anonymous or user) can read live games.
       Hosts/Admins can create/update; delete is admin/superadmin only.
    */
    match /games/{gameId} {
      // Player app uses Anonymous Auth â†’ allow reads to any signed-in user
      allow read: if signedIn();

      // Host/Admin can create or update games if they have role via claims OR employees profile
      allow create, update: if signedIn() && (
        // Claims path
        request.auth.token.admin == true ||
        (request.auth.token.roles != null && (
          'host' in request.auth.token.roles ||
          'admin' in request.auth.token.roles ||
          'superadmin' in request.auth.token.roles
        )) ||
        (request.auth.token.role != null && (
          request.auth.token.role == 'host' ||
          request.auth.token.role == 'admin' ||
          request.auth.token.role == 'superadmin'
        )) ||
        // Profile fallback path
        (
          exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles != null &&
          (
            'host' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
            'admin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
            'superadmin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles
          )
        )
      );

      // Delete stays restricted to admin/superadmin
      allow delete: if signedIn() && (
        request.auth.token.admin == true ||
        (request.auth.token.roles != null && (
          'admin' in request.auth.token.roles || 'superadmin' in request.auth.token.roles
        )) ||
        (request.auth.token.role != null && (
          request.auth.token.role == 'admin' || request.auth.token.role == 'superadmin'
        )) ||
        (
          exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles != null &&
          (
            'admin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
            'superadmin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles
          )
        )
      );
    }

    /* ========= Games: specific subcollections for players (additive) =========
       Let each signed-in (incl. anonymous) player manage their own doc.
       Admins can read any player doc.
    */
    match /games/{gameId}/players/{playerId} {
      allow create: if signedIn() && request.auth.uid == playerId;
      allow read:   if signedIn() && (request.auth.uid == playerId || isAdmin());
      allow update: if signedIn() && request.auth.uid == playerId;
      allow delete: if signedIn() && request.auth.uid == playerId;
    }

    // Games subcollections: generic fallback
    // Players still covered by the more specific rule above.
    match /games/{gameId}/{subpath=**} {
      allow read: if signedIn();

      allow create, update: if signedIn() && (
        request.auth.token.admin == true ||
        (request.auth.token.roles != null && (
          'host' in request.auth.token.roles ||
          'admin' in request.auth.token.roles ||
          'superadmin' in request.auth.token.roles
        )) ||
        (request.auth.token.role != null && (
          request.auth.token.role == 'host' ||
          request.auth.token.role == 'admin' ||
          request.auth.token.role == 'superadmin'
        )) ||
        (
          exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles != null &&
          (
            'host' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
            'admin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
            'superadmin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles
          )
        )
      );

      allow delete: if signedIn() && (
        request.auth.token.admin == true ||
        (request.auth.token.roles != null && (
          'admin' in request.auth.token.roles || 'superadmin' in request.auth.token.roles
        )) ||
        (request.auth.token.role != null && (
          request.auth.token.role == 'admin' || request.auth.token.role == 'superadmin'
        )) ||
        (
          exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles != null &&
          (
            'admin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles ||
            'superadmin' in get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.roles
          )
        )
      );
    }

    /* ========= Admin Calendar Collections =========
       Admin-only read/write. These power the admin calendar page.
    */
    match /locations/{docId} {
      allow read, write: if isAdmin();
    }

    match /shifts/{docId} {
      allow read, write: if isAdmin();
    }
  }
}
