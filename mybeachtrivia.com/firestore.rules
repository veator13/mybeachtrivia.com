rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---- role helpers (stable) ----
    function isSignedIn() { return request.auth != null; }
    function hasRole(name) {
      return isSignedIn() && (
        (request.auth.token.roles != null && name in request.auth.token.roles) ||
        (request.auth.token.role  != null && request.auth.token.role == name)
      );
    }
    function isAdmin() {
      return isSignedIn() && (
        request.auth.token.admin == true || hasRole('admin') || hasRole('superadmin')
      );
    }
    function isHostOrAdmin() {
      return isSignedIn() && ( isAdmin() || hasRole('host') );
    }


    function signedIn() { return request.auth != null; }
    function isSelf(uid) { return signedIn() && request.auth.uid == uid; }

    // Admin if claim 'admin' is true OR roles array contains admin/superadmin
    function isAdmin() {
      return signedIn() && (
        request.auth.token.admin == true ||
        (request.auth.token.roles != null &&
         request.auth.token.roles.hasAny(['admin','superadmin']))
      );
    }

    // Fields employees may edit on their own profile
    function selfAllowedKeys() {
      return [
        'firstName','lastName','nickname','dob',
        'phone','emergencyPhone','emergencyName','photoURL',
        'setupCompleted','updatedAt'
      ];
    }

    match /employees/{uid} {
      // Employee can read self; admin can read all
      allow read: if isSelf(uid) || isAdmin();

      // Create by admin only (you create employee docs via admin flow)
      allow create: if isAdmin();

      // Update: admin any; employee only allow-listed keys on self
      allow update: if isAdmin()
                 || (isSelf(uid) &&
                     request.resource.data.diff(resource.data)
                       .changedKeys().hasOnly(selfAllowedKeys()));

      // Delete by admin only
      allow delete: if isAdmin();
    }

    // (Leave your other collections' rules as they are)
  }
    // playlists: hosts/admins can read all; signed-in can read published items; writes admin-only
    match /playlists/{playlistId} {
      allow read: if isHostOrAdmin() || (isSignedIn() && resource.data.published == true);
      allow create, update, delete: if isAdmin();
    }

    // legacy music_bingo collection: same as playlists
    match /music_bingo/{playlistId} {
      allow read: if isHostOrAdmin() || (isSignedIn() && resource.data.published == true);
      allow create, update, delete: if isAdmin();
    }

    // games: players (anon or user) can read; hosts/admins control lifecycle
    match /games/{gameId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isHostOrAdmin();
    }

}
