rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Helpers ---------- */

    function isAuthed() {
      return request.auth != null;
    }

    // Employee doc for the signed-in user
    function me() {
      return isAuthed()
        ? get(/databases/$(database)/documents/employees/$(request.auth.uid))
        : null;
    }

    function hasEmp() {
      return isAuthed() && me() != null && me().exists();
    }

    // Active employee: employee doc has { active: true }
    function isActiveEmp() {
      return hasEmp()
        && ('active' in me().data)
        && (me().data.active == true);
    }

    // Robust admin detector (supports multiple schema styles)
    function isAdmin() {
      return hasEmp() && (
        (('admin' in me().data) && me().data.admin == true) ||
        (('role'  in me().data) && me().data.role  == 'admin') ||
        (('roles' in me().data) && me().data.roles.hasAny(['admin']))
      );
    }

    function isSelf(uid) {
      return isAuthed() && (request.auth.uid == uid);
    }

    // Employees may update ONLY these personal fields on their own doc.
    function selfUpdateIsSafe() {
      let allowed = [
        'displayName', 'photoURL', 'email', 'phone',
        'notifications', 'availability', 'bio'
      ];
      let changed = request.resource.data.diff(resource.data).changedKeys();
      return changed.hasOnly(allowed);
    }

    // No one (except admin) may touch these sensitive fields.
    function touchesSensitive() {
      let sensitive = ['admin','role','roles','active','permissions','wage','rate','pay','title'];
      let changed = request.resource.data.diff(resource.data).changedKeys();
      return changed.hasAny(sensitive);
    }

    /* ---------- Collections ---------- */

    // Employees
    match /employees/{uid} {
      // Active employees (and admins) can read the roster.
      allow read: if isActiveEmp() || isAdmin();

      // Only admins can create/delete employee docs.
      allow create: if isAdmin();
      allow delete: if isAdmin();

      // Admins can update anything; employees can safely edit their own profile fields.
      allow update: if
        isAdmin() ||
        (isSelf(uid) && selfUpdateIsSafe() && !touchesSensitive());
    }

    // Public job applications (user-facing form can write without auth)
    match /Applications/{appId} {
      allow create: if true;                        // anyone may submit
      allow read, update, delete: if isAdmin();     // only admins manage
    }

    // Operational data: locations, shifts, games
    // - Active employees can read
    // - Admins write
    // - Optional public read if { public: true }
    match /{colName}/{docId} where colName in ['locations','shifts','games'] {
      allow read: if isActiveEmp() || (('public' in resource.data) && resource.data.public == true);
      allow create, update, delete: if isAdmin();
    }

    // Default deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}