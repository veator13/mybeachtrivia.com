// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- helpers ---------- */
    function signedIn() { return request.auth != null; }
    function empDoc() {
      return signedIn()
        ? get(/databases/$(database)/documents/employees/$(request.auth.uid))
        : null;
    }
    function isActiveEmp() {
      return empDoc().exists() && (empDoc().data.active == true);
    }
    // roles can be an array like ["admin","host"] or an object with booleans
    function hasRole(role) {
      return isActiveEmp() &&
        (
          (empDoc().data.roles is list && role in empDoc().data.roles) ||
          (empDoc().data.roles is map  && (empDoc().data.roles[role] == true))
        );
    }
    function isAdmin() { return hasRole("admin"); }
    function isHost()  { return hasRole("host") || isAdmin(); }

    /* ---------- applications (public submit; admins manage) ---------- */
    match /applications/{appId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    /* ---------- employees (admin only) ---------- */
    match /employees/{uid} {
      allow read, create, update, delete: if isAdmin();
    }

    /* ---------- operational data (employee read, admin manage) ---------- */
    match /{col}/{id} where col in ["locations","shifts","scores","shiftTypes"] {
      allow read: if isActiveEmp();
      allow create, update, delete: if isAdmin();
    }

    /* ---------- music bingo playlists ---------- */
    // Playlists are not sensitive; allow public read so the host UI (and future
    // public experiences) can list them without auth friction.
    match /music_bingo/{playlistId} {
      allow read: if true;
      // Keep writes restricted to admins so content is curated.
      allow create, update, delete: if isAdmin();
    }

    /* ---------- games ---------- */
    // Everyone can read games (player clients need this).
    // Hosts/Admins can create & update; only admins can delete.
    match /games/{gameId} {
      allow read: if true;
      allow create: if isHost();
      allow update: if isHost();
      allow delete: if isAdmin();
    }

    /* ---------- default deny ---------- */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
